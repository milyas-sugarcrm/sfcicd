//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ESPVariants {
  public class Selections {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Code { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public List<Values> Values { get; set; }

    public Selections(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'Code') {
              Code = parser.getText();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'Values') {
              Values = arrayOfValues(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Selections consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Values_Z {
    @AuraEnabled
    public String Code { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String Description { get; set; }

    public Values_Z(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Code') {
              Code = parser.getText();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'Description') {
              Description = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Values_Z consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  @AuraEnabled
  public Integer ProductId { get; set; }
  @AuraEnabled
  public Header Header { get; set; }
  @AuraEnabled
  public List<Selections> Selections { get; set; }
  @AuraEnabled
  public List<Rows> Rows { get; set; }
  @AuraEnabled
  public Boolean HasColumnHeaders { get; set; }
  @AuraEnabled
  public Boolean HasRowHeaders { get; set; }

  public ESPVariants(JSONParser parser) {
    while (parser.nextToken() != System.JSONToken.END_OBJECT) {
      if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
        String text = parser.getText();
        if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
          if (text == 'ProductId') {
            ProductId = parser.getIntegerValue();
          } else if (text == 'Header') {
            Header = new Header(parser);
          } else if (text == 'Selections') {
            Selections = arrayOfSelections(parser);
          } else if (text == 'Rows') {
            Rows = arrayOfRows(parser);
          } else if (text == 'HasColumnHeaders') {
            HasColumnHeaders = parser.getBooleanValue();
          } else if (text == 'HasRowHeaders') {
            HasRowHeaders = parser.getBooleanValue();
          } else {
            System.debug(
              LoggingLevel.WARN,
              'ESPVariants consuming unrecognized property: ' + text
            );
            consumeObject(parser);
          }
        }
      }
    }
  }

  public class Header {
    @AuraEnabled
    public String Code { get; set; }
    @AuraEnabled
    public String Description { get; set; }
    @AuraEnabled
    public List<String> Values { get; set; }

    public Header(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Code') {
              Code = parser.getText();
            } else if (text == 'Description') {
              Description = parser.getText();
            } else if (text == 'Values') {
              Values = arrayOfString(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Header consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Images {
    @AuraEnabled
    public String Path { get; set; }
    public Images(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            Path = text;
          }
        }
      }
    }
  }

  public class Values {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }

    public Values(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Values consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Columns {
    @AuraEnabled
    public Integer VariantId { get; set; }
    @AuraEnabled
    public String Name { get; set; }

    public Columns(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'VariantId') {
              VariantId = parser.getIntegerValue();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Columns consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Quantity {
    @AuraEnabled
    public Integer From_Z { get; set; } // in json: From
    @AuraEnabled
    public Integer To { get; set; }

    public Quantity(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'From') {
              From_Z = parser.getIntegerValue();
            } else if (text == 'To') {
              To = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Quantity consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Rows {
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public List<Images> Images { get; set; }
    @AuraEnabled
    public List<Values_Z> Values { get; set; }
    @AuraEnabled
    public List<Columns> Columns { get; set; }

    public Rows(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'Images') {
              Images = arrayOfImages(parser);
            } else if (text == 'Values') {
              Values = arrayOfValues_Z(parser);
            } else if (text == 'Columns') {
              Columns = arrayOfColumns(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Rows consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public static ESPVariants parse(String json) {
    System.JSONParser parser = System.JSON.createParser(json);
    return new ESPVariants(parser);
  }

  public static void consumeObject(System.JSONParser parser) {
    Integer depth = 0;
    do {
      System.JSONToken curr = parser.getCurrentToken();
      if (
        curr == System.JSONToken.START_OBJECT ||
        curr == System.JSONToken.START_ARRAY
      ) {
        depth++;
      } else if (
        curr == System.JSONToken.END_OBJECT ||
        curr == System.JSONToken.END_ARRAY
      ) {
        depth--;
      }
    } while (depth > 0 && parser.nextToken() != null);
  }

  private static List<Selections> arrayOfSelections(System.JSONParser p) {
    List<Selections> res = new List<Selections>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Selections(p));
    }
    return res;
  }

  private static List<Values_Z> arrayOfValues_Z(System.JSONParser p) {
    List<Values_Z> res = new List<Values_Z>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Values_Z(p));
    }
    return res;
  }

  private static List<Columns> arrayOfColumns(System.JSONParser p) {
    List<Columns> res = new List<Columns>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Columns(p));
    }
    return res;
  }

  private static List<Values> arrayOfValues(System.JSONParser p) {
    List<Values> res = new List<Values>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Values(p));
    }
    return res;
  }

  private static List<Images> arrayOfImages(System.JSONParser p) {
    List<Images> res = new List<Images>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Images(p));
    }
    return res;
  }

  private static List<String> arrayOfString(System.JSONParser p) {
    List<String> res = new List<String>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(p.getText());
    }
    return res;
  }

  private static List<Rows> arrayOfRows(System.JSONParser p) {
    List<Rows> res = new List<Rows>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Rows(p));
    }
    return res;
  }
}
