//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ESPProducts {
  public class Selections {
    public Selections(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            {
              System.debug(
                LoggingLevel.WARN,
                'Selections consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Supplier_Z {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String AsiNumber { get; set; }
    @AuraEnabled
    public Phone_Z Phone { get; set; }

    public Supplier_Z(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();

          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'AsiNumber') {
              AsiNumber = parser.getText();
            } else if (text == 'Phone') {
              Phone = new Phone_Z(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Supplier_Z consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Phone_Z {
    @AuraEnabled
    public String TollFree { get; set; }
    @AuraEnabled
    public Integer index { get; set; }

    public Phone_Z(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'TollFree') {
              TollFree = parser.getText();
            } else if (text == '$index') {
              index = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Phone_Z consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Price {
    @AuraEnabled
    public Integer Quantity { get; set; }
    @AuraEnabled
    public Double Price { get; set; }
    @AuraEnabled
    public Double Cost { get; set; }
    @AuraEnabled
    public Double Profit { get; set; }
    @AuraEnabled
    public String DiscountCode { get; set; }
    @AuraEnabled
    public String CurrencyCode { get; set; }

    public Price(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Quantity') {
              Quantity = parser.getIntegerValue();
            } else if (text == 'Price') {
              Price = parser.getDoubleValue();
            } else if (text == 'Cost') {
              Cost = parser.getDoubleValue();
            } else if (text == 'DiscountCode') {
              DiscountCode = parser.getText();
            } else if (text == 'CurrencyCode') {
              CurrencyCode = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Price consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
            if (Price != null && Cost != null) {
              Profit = Price - Cost;
            }
          }
        }
      }
    }
  }

  public class Results {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String Description { get; set; }
    @AuraEnabled
    public String ShortDescription { get; set; }
    @AuraEnabled
    public String Number_Z { get; set; } // in json: Number
    @AuraEnabled
    public String ImageUrl { get; set; }
    @AuraEnabled
    public List<VirtualSampleImages> VirtualSampleImages { get; set; }
    @AuraEnabled
    public String ConfigId { get; set; }
    @AuraEnabled
    public Supplier Supplier { get; set; }
    @AuraEnabled
    public Ad ad { get; set; }
    @AuraEnabled
    public Price Price { get; set; }
    @AuraEnabled
    public Boolean IsNew { get; set; }
    @AuraEnabled
    public Boolean IsConfirmed { get; set; }
    @AuraEnabled
    public Boolean HasVirtualSample { get; set; }
    @AuraEnabled
    public Attributes Attributes { get; set; }
    @AuraEnabled
    public String Colors { get; set; }
    @AuraEnabled
    public String Sizes { get; set; }
    @AuraEnabled
    public Prices HighestPrice { get; set; }
    @AuraEnabled
    public List<Variants> Variants { get; set; }
    @AuraEnabled
    public Double variantPrice { get; set; }
    @AuraEnabled
    public Double variantCost { get; set; }
    @AuraEnabled
    public Integer variantQuantity { get; set; }
    @AuraEnabled
    public String variantPriceDiscountCode { get; set; }
    @AuraEnabled
    public String noPrice { get; set; }

    public Results(JSONParser parser) {
      try {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
          if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
            String text = parser.getText();
            if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
              if (text == 'Id') {
                Id = parser.getIntegerValue();
              } else if (text == 'Name') {
                Name = parser.getText();
              } else if (text == 'Description') {
                Description = parser.getText();
              } else if (text == 'ShortDescription') {
                ShortDescription = parser.getText();
              } else if (text == 'Number') {
                Number_Z = parser.getText();
              } else if (text == 'ImageUrl') {
                ImageUrl = System.Label.ESP_URL + parser.getText();
              } else if (text == 'VirtualSampleImages') {
                VirtualSampleImages = arrayOfVirtualSampleImages(parser);
              } else if (text == 'ConfigId') {
                ConfigId = parser.getText();
              } else if (text == 'Supplier') {
                Supplier = new Supplier(parser);
              } else if (text == 'Ad') {
                ad = new Ad(parser);
              } else if (text == 'Variants') {
                Variants = arrayOfVariants(parser);
              } else if (text == 'Attributes') {
                Attributes = new Attributes(parser);
              } else if (text == 'HighestPrice') {
                HighestPrice = new Prices(parser);
              } else if (text == 'IsNew') {
                IsNew = parser.getBooleanValue();
              } else if (text == 'IsConfirmed') {
                IsConfirmed = parser.getBooleanValue();
              } else if (text == 'HasVirtualSample') {
                HasVirtualSample = parser.getBooleanValue();
              } else {
                System.debug(
                  LoggingLevel.WARN,
                  'Results consuming unrecognized property: ' + text
                );
                consumeObject(parser);
              }
            }
          }
        }
      } catch (Exception ex) {
        System.debug('Exception Occurs ' + ex.getStackTraceString());
      }
      if (
        Variants != null &&
        Variants.size() > 0 &&
        Variants[0].Prices != null &&
        Variants[0].Prices.size() > 0 &&
        Variants[0].Prices[0] != null &&
        Variants[0].Prices[0].Price != null &&
        Variants[0].Prices[0].Cost != null &&
        Variants[0].Prices[0].Quantity != null &&
        Variants[0].Prices[0].Quantity.From_Z != null &&
        Variants[0].Prices[0].DiscountCode != null
      ) {
        variantPrice = Variants[0].Prices[0].Price;
        variantCost = Variants[0].Prices[0].Cost;
        variantQuantity = Variants[0].Prices[0].Quantity.From_Z;
        variantPriceDiscountCode = Variants[0].Prices[0].DiscountCode;
        HighestPrice = null;
      }
      if (
        HighestPrice == null &&
        (Variants == null ||
        (Variants != null &&
        Variants.size() > 0 &&
        Variants[0].Prices != null &&
        Variants[0].Prices[0] != null &&
        Variants[0].Prices[0].Price == null))
      ) {
        noPrice = 'QUR';
      }
      Colors = '';
      List<String> retVal = new List<String>();
      Boolean retValSize = false;
      List<Values_Z> colorValues = null;
      Attributes productAttribute = Attributes;
      if (productAttribute != null) {
        if (productAttribute.Colors != null) {
          if (productAttribute.Colors.Values != null)
            colorValues = productAttribute.Colors.Values;
        }
      }
      if (colorValues != null) {
        for (Values_Z obj : colorValues) {
          if (obj.Name != null)
            retVal.add(obj.Name);
          if (retVal.size() > 4) {
            retValSize = true;
            break;
          }
        }
        if (retVal.size() > 0) {
          Colors = ' ' + string.join(retVal, ', ');
          if (retValSize == true) {
            Colors = Colors + '...';
          }
        }
      }

      Sizes = '';
      List<String> sizeRetVal = new List<String>();
      Boolean retValTotalSize = false;
      List<Values_Z> sizeValues = null;
      if (productAttribute != null) {
        if (productAttribute.Sizes != null) {
          if (productAttribute.Sizes.Values != null)
            sizeValues = productAttribute.Sizes.Values;
        }
      }
      if (sizeValues != null) {
        for (Values_Z obj : sizeValues) {
          if (obj.Name != null)
            sizeRetVal.add(obj.Name);
          if (sizeRetVal.size() > 6) {
            retValTotalSize = true;
            break;
          }
        }
        if (sizeRetVal.size() > 0) {
          Sizes = ' ' + string.join(sizeRetVal, ', ');
          if (sizeRetVal.size() > 6) {
            Sizes = Sizes + '...';
          }
        }
      }

      /*Colors = '';
List<Values> colorValues = null;
Attributes productAttribute = Attribute;
if(productAttribute != null){
if(productAttribute.Colors != null){
colorValues= productAttribute.Colors.Values;
}
}
if(colorValues != null){
for(Values obj:colorValues){
Colors = Colors + obj.Name + ',';             
}
}
Colors = Colors.removeEnd(',');*/
    }
  }
  public class Ad {
    @AuraEnabled
    public String Id { get; set; }
    @AuraEnabled
    public String Position { get; set; }

    public Ad(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getText();
            } else if (text == 'Position') {
              Position = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Ad consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Variants {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String Description { get; set; }
    @AuraEnabled
    public Attributes Attributes { get; set; }
    @AuraEnabled
    public List<Prices> Prices { get; set; }

    public Variants(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'Description') {
              Description = parser.getText();
            } else if (text == 'Attributes') {
              Attributes = new Attributes(parser);
            } else if (text == 'Prices') {
              Prices = arrayOfPrices(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Variants consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  private static List<Prices> arrayOfPrices(System.JSONParser p) {
    List<Prices> res = new List<Prices>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Prices(p));
    }
    return res;
  }
  private static List<Variants> arrayOfVariants(System.JSONParser p) {
    List<Variants> res = new List<Variants>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Variants(p));
    }
    return res;
  }
  public class Attributes {
    @AuraEnabled
    public Colors Colors { get; set; }
    @AuraEnabled
    public Sizes Sizes { get; set; }

    public Attributes(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Colors') {
              Colors = new Colors(parser);
            } else if (text == 'Sizes') {
              Sizes = new Sizes(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Attributes consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Sizes {
    @AuraEnabled
    public List<Values_Z> Values { get; set; }

    public Sizes(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Values') {
              Values = arrayOfValues_Z(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Sizes consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Colors {
    @AuraEnabled
    public List<Values_Z> Values { get; set; }

    public Colors(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Values') {
              Values = arrayOfValues_Z(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Colors consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  private static List<Values_Z> arrayOfValues_Z(System.JSONParser p) {
    List<Values_Z> res = new List<Values_Z>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Values_Z(p));
    }
    return res;
  }
  public class Values_Z {
    @AuraEnabled
    public String Code { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public List<Options> Options { get; set; }
    @AuraEnabled
    public String VendorCode { get; set; }
    @AuraEnabled
    public Integer index { get; set; }

    public Values_Z(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Code') {
              Code = parser.getText();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'VendorCode') {
              VendorCode = parser.getText();
            } else if (text == 'index') {
              index = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Values_Z consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Options {
    @AuraEnabled
    public String Type_Z { get; set; } // in json: Type
    @AuraEnabled
    public List<Values> Values { get; set; }

    public Options(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Type') {
              Type_Z = parser.getText();
            } else if (text == 'Values') {
              Values = arrayOfValues(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Options consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  private static List<Options> arrayOfOptions(System.JSONParser p) {
    List<Options> res = new List<Options>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Options(p));
    }
    return res;
  }
  public class Values {
    @AuraEnabled
    public String Code { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String ImageUrl { get; set; }
    @AuraEnabled
    public String VendorCode { get; set; }
    @AuraEnabled
    public String Description { get; set; }
    @AuraEnabled
    public String SKU { get; set; }
    @AuraEnabled
    public Integer index { get; set; }
    public Values(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Code') {
              Code = parser.getText();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Values consuming unrecognized property: ' + text
              );
            }
          }
        }
      }
    }
  }

  private static List<Values> arrayOfValues(System.JSONParser p) {
    List<Values> res = new List<Values>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Values(p));
    }
    return res;

    /*List<Values> lstValues = new List<Values>();
        if(values != null){
            String valuesListJson = JSON.serialize(values);
            List<Object>variantValuesList =(List<Object>) JSON.deserializeUntyped(valuesListJson); 
            System.debug('variantValuesList: '+variantValuesList);
            for(Object objValues:variantValuesList){
                String valuesObjString = JSON.serialize(objValues);
                try{
                    Map<String,Object> mapValues =(Map<String,Object>) JSON.deserializeUntyped(valuesObjString);
                    System.debug('values: '+mapValues);
                   // Values valuesObj = new Values(mapValues);
                   // lstValues.add(valuesObj);                    
                } catch(Exception ex){
                //    Values valuesObj = new Values(objValues);
                }
            }   
        }*/
  }

  public class Categories {
    @AuraEnabled
    public String Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String ContextPath { get; set; }
    @AuraEnabled
    public Integer Products { get; set; }

    public Categories(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getText();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'ContextPath') {
              ContextPath = parser.getText();
            } else if (text == 'Products') {
              Products = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Categories consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Fax {
    @AuraEnabled
    public String Work { get; set; }
    @AuraEnabled
    public String Primary { get; set; }
    @AuraEnabled
    public Integer index { get; set; }

    public Fax(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Work') {
              Work = parser.getText();
            } else if (text == 'Primary') {
              Primary = parser.getText();
            } else if (text == '$index') {
              index = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Fax consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Phone {
    @AuraEnabled
    public String Work { get; set; }
    @AuraEnabled
    public String TollFree { get; set; }
    @AuraEnabled
    public Integer index { get; set; }

    public Phone(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Work') {
              Work = parser.getText();
            } else if (text == 'TollFree') {
              TollFree = parser.getText();
            } else if (text == '$index') {
              index = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Phone consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Rating {
    @AuraEnabled
    public Integer Rating { get; set; }
    @AuraEnabled
    public Integer Companies { get; set; }
    @AuraEnabled
    public Integer Transactions { get; set; }

    public Rating(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Rating') {
              Rating = parser.getIntegerValue();
            } else if (text == 'Companies') {
              Companies = parser.getIntegerValue();
            } else if (text == 'Transactions') {
              Transactions = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Rating consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }
  public class Quantity {
    @AuraEnabled
    public Integer From_Z { get; set; } // in json: From
    @AuraEnabled
    public Integer To { get; set; }
    @AuraEnabled
    public Integer index { get; set; }

    public Quantity(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'From') {
              From_Z = parser.getIntegerValue();
            } else if (text == 'To') {
              To = parser.getIntegerValue();
            } else if (text == 'index') {
              index = parser.getIntegerValue();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Quantity consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Prices {
    @AuraEnabled
    public Quantity Quantity { get; set; }
    @AuraEnabled
    public Double Price { get; set; }
    @AuraEnabled
    public Double Cost { get; set; }
    @AuraEnabled
    public Double Profit { get; set; }
    @AuraEnabled
    public String DiscountCode { get; set; }
    @AuraEnabled
    public String CurrencyCode { get; set; }
    @AuraEnabled
    public Boolean IsQUR { get; set; }

    public Prices(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Quantity') {
              Quantity = new Quantity(parser);
            } else if (text == 'Price') {
              Price = parser.getDoubleValue();
            } else if (text == 'Cost') {
              Cost = parser.getDoubleValue();
            } else if (text == 'DiscountCode') {
              DiscountCode = parser.getText();
            } else if (text == 'CurrencyCode') {
              CurrencyCode = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Prices consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
      if (Price != null && Cost != null) {
        profit = Price - Cost;
      }
    }
  }
  public class Dimensions {
    @AuraEnabled
    public List<Categories> Categories { get; set; }
    @AuraEnabled
    public List<Categories> Colors { get; set; }
    @AuraEnabled
    public List<Categories> ImprintingMethods { get; set; }
    @AuraEnabled
    public List<Categories> LineNames { get; set; }
    @AuraEnabled
    public List<Categories> Materials { get; set; }
    @AuraEnabled
    public List<Categories> Prices { get; set; }
    @AuraEnabled
    public List<Categories> Sizes { get; set; }
    @AuraEnabled
    public List<Categories> Suppliers { get; set; }
    @AuraEnabled
    public List<Categories> States { get; set; }
    @AuraEnabled
    public List<Categories> AsiNumbers { get; set; }
    @AuraEnabled
    public List<Categories> Themes { get; set; }
    @AuraEnabled
    public List<Categories> TradeNames { get; set; }
    @AuraEnabled
    public List<Categories> Shapes { get; set; }

    public Dimensions(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Categories') {
              Categories = arrayOfCategories(parser);
            } else if (text == 'Colors') {
              Colors = arrayOfCategories(parser);
            } else if (text == 'ImprintingMethods') {
              ImprintingMethods = arrayOfCategories(parser);
            } else if (text == 'LineNames') {
              LineNames = arrayOfCategories(parser);
            } else if (text == 'Materials') {
              Materials = arrayOfCategories(parser);
            } else if (text == 'Prices') {
              Prices = arrayOfCategories(parser);
            } else if (text == 'Sizes') {
              Sizes = arrayOfCategories(parser);
            } else if (text == 'Suppliers') {
              Suppliers = arrayOfCategories(parser);
            } else if (text == 'States') {
              States = arrayOfCategories(parser);
            } else if (text == 'AsiNumbers') {
              AsiNumbers = arrayOfCategories(parser);
            } else if (text == 'Themes') {
              Themes = arrayOfCategories(parser);
            } else if (text == 'TradeNames') {
              TradeNames = arrayOfCategories(parser);
            } else if (text == 'Shapes') {
              Shapes = arrayOfCategories(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Dimensions consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Links {
    @AuraEnabled
    public String Self { get; set; }
    @AuraEnabled
    public String Next { get; set; }

    public Links(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Self') {
              Self = parser.getText();
            } else if (text == 'Next') {
              Next = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Links consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Supplier {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String Name { get; set; }
    @AuraEnabled
    public String AsiNumber { get; set; }
    @AuraEnabled
    public Phone Phone { get; set; }
    @AuraEnabled
    public Fax Fax { get; set; }
    @AuraEnabled
    public String Email { get; set; }
    @AuraEnabled
    public String[] Websites { get; set; }
    @AuraEnabled
    public Rating Rating { get; set; }

    public Supplier(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'Name') {
              Name = parser.getText();
            } else if (text == 'AsiNumber') {
              AsiNumber = parser.getText();
            } else if (text == 'Phone') {
              Phone = new Phone(parser);
            } else if (text == 'Fax') {
              Fax = new Fax(parser);
            } else if (text == 'Email') {
              Email = parser.getText();
            } else if (text == 'Rating') {
              Rating = new Rating(parser);
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Supplier consuming unrecognized property: ' + text
              );
              //System.debug('Texttt: '+parser.getIntegerValue());
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  @AuraEnabled
  public List<Results> Results { get; set; }
  @AuraEnabled
  public Selections Selections { get; set; }
  @AuraEnabled
  public Dimensions Dimensions { get; set; }
  @AuraEnabled
  public Links Links { get; set; }
  @AuraEnabled
  public String Query { get; set; }
  @AuraEnabled
  public String Breadcrumb { get; set; }
  @AuraEnabled
  public Integer Page { get; set; }
  @AuraEnabled
  public Integer ResultsPerPage { get; set; }
  @AuraEnabled
  public String ResultsTotal { get; set; }
  @AuraEnabled
  public Integer SuppliersTotal { get; set; }
  @AuraEnabled
  public Double CompletedIn { get; set; }

  public ESPProducts(JSONParser parser) {
    while (parser.nextToken() != System.JSONToken.END_OBJECT) {
      if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
        String text = parser.getText();
        if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
          if (text == 'Results') {
            Results = arrayOfResults(parser);
          } else if (text == 'Selections') {
            Selections = new Selections(parser);
          } else if (text == 'Dimensions') {
            Dimensions = new Dimensions(parser);
          } else if (text == 'Links') {
            Links = new Links(parser);
          } else if (text == 'Query') {
            Query = parser.getText();
          } else if (text == 'Breadcrumb') {
            Breadcrumb = parser.getText();
          } else if (text == 'Page') {
            Page = parser.getIntegerValue();
          } else if (text == 'ResultsPerPage') {
            ResultsPerPage = parser.getIntegerValue();
          } else if (text == 'ResultsTotal') {
            ResultsTotal = '(' + parser.getText() + ')';
            SYstem.debug('ResultsTotal ' + ResultsTotal);
          } else if (text == 'SuppliersTotal') {
            SuppliersTotal = parser.getIntegerValue();
          } else if (text == 'CompletedIn') {
            CompletedIn = parser.getDoubleValue();
          } else {
            System.debug(
              LoggingLevel.WARN,
              'ESPProducts consuming unrecognized property: ' + text
            );
            consumeObject(parser);
          }
        }
      }
    }
  }

  public static String parseString(Object objectValue) {
    try {
      String str = String.valueOf(objectValue);
      return str;
    } catch (Exception ex) {
      System.debug('Exception 2 ' + ex.getMessage());
      System.debug('Exception 2 ' + ex.getStackTraceString());
      return '';
    }
  }

  /*   private static List<Values> arrayOfValues(Object values) {
        List<Values> lstValues = new List<Values>();
        if(values != null){
            String valuesListJson = JSON.serialize(values);
            List<Object>variantValuesList =(List<Object>) JSON.deserializeUntyped(valuesListJson);   
            for(Object objValues:variantValuesList){
                String valuesObjString = JSON.serialize(objValues);
                try{
                    Map<String,Object>mapValues =(Map<String,Object>) JSON.deserializeUntyped(valuesObjString);
                    Values valuesObj = new Values(mapValues);
                    lstValues.add(valuesObj);                    
                } catch(Exception ex){
                    Values valuesObj = new Values(objValues);
                }
            }   
        }
        return lstValues;
    } */
  public class VirtualSampleImages {
    @AuraEnabled
    public Integer Id { get; set; }
    @AuraEnabled
    public String ImageUrl { get; set; }

    public VirtualSampleImages(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'Id') {
              Id = parser.getIntegerValue();
            } else if (text == 'ImageUrl') {
              ImageUrl = System.Label.ESP_URL + parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'VirtualSampleImages consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  @AuraEnabled
  public static ESPProducts parse(String json) {
    System.JSONParser parser = System.JSON.createParser(json);
    return new ESPProducts(parser);
  }

  @AuraEnabled
  public static void consumeObject(System.JSONParser parser) {
    Integer depth = 0;
    do {
      System.JSONToken curr = parser.getCurrentToken();
      if (
        curr == System.JSONToken.START_OBJECT ||
        curr == System.JSONToken.START_ARRAY
      ) {
        depth++;
      } else if (
        curr == System.JSONToken.END_OBJECT ||
        curr == System.JSONToken.END_ARRAY
      ) {
        depth--;
      }
    } while (depth > 0 && parser.nextToken() != null);
  }

  private static List<VirtualSampleImages> arrayOfVirtualSampleImages(
    System.JSONParser p
  ) {
    List<VirtualSampleImages> res = new List<VirtualSampleImages>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new VirtualSampleImages(p));
    }
    return res;
  }

  private static List<Categories> arrayOfCategories(System.JSONParser p) {
    List<Categories> res = new List<Categories>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Categories(p));
    }
    return res;
  }
  private static List<Results> arrayOfResults(System.JSONParser p) {
    List<Results> res = new List<Results>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      Results rs = new Results(p);
      if (rs.Id != null)
        res.add(rs);
    }
    return res;
  }
}
